generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  username    String     @unique
  email       String     @unique
  password    String
  dni         String?    @unique @db.VarChar(8)
  firstName   String?
  lastName    String?
  phoneNumber String?    @db.VarChar(9)
  address     String?
  photoUrl    String?    @db.Text
  isAdmin     Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cartItems   CartItem[]
  favorites   Favorite[]
  orders      Order[]
}

model Product {
  id               Int         @id @default(autoincrement())
  name             String
  description      String?     @db.Text
  price            Decimal     @db.Decimal(10, 2)
  image            String?     @db.Text
  additionalImages Json?
  category         String
  stock            Int         @default(0)
  customizable     String?
  baseSpecs        Json?
  rating           Decimal?    @db.Decimal(3, 2)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  cartItems        CartItem[]
  favoritedBy      Favorite[]
  orderItems       OrderItem[]
  reviews          Review[]
}

model Order {
  id              String      @id
  userId          Int
  subtotal        Decimal     @db.Decimal(10, 2)
  giftWrapTotal   Decimal     @db.Decimal(10, 2)
  total           Decimal     @db.Decimal(10, 2)
  status          String
  orderDate       DateTime    @default(now())
  shippingAddress String
  billingAddress  String
  billingEmail    String
  paymentMethod   String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]

  @@index([userId])
}

model OrderItem {
  id                   Int      @id @default(autoincrement())
  orderId              String
  productId            Int?
  name                 String
  quantity             Int
  price                Decimal  @db.Decimal(10, 2)
  customizationDetails Json?
  giftWrap             Boolean?
  image                String?  @db.Text
  order                Order    @relation(fields: [orderId], references: [id])
  product              Product? @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  author    String
  rating    Int      @db.TinyInt
  comment   String?  @db.Text
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  Int?
  product   Product  @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model CartItem {
  id                   Int      @id @default(autoincrement())
  userId               Int
  productId            Int
  quantity             Int      @default(1)
  giftWrap             Boolean  @default(false)
  customizationDetails String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  product              Product  @relation(fields: [productId], references: [id])
  user                 User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId], name: "CartItem_userId_productId_key")
  @@index([userId])
  @@index([productId])
}
